body {
    margin: 0;
    padding: 0;
    color: #333;
    font-family: sans-serif;
    line-height: 1.5;
    background: #f9f9f9;
}

h1 {
    margin: 0;
}

p {
    margin-bottom: 0;
}

/* Авторское решение */

/* т.е. суть здесь в том, что
flex-shrink у обоих блоков выставлено одинаковое (= 1) и при
уменьшении viewport они оба будут сжиматься одновременно и одинаково, а
flex-grow - у main очень большое (=9999), при =1 у aside, т.е. при
viewport > 1040 (почему, кстати, именно 1040? откуда оно?),
main будет расширяться намного быстрее и заметнее, чем aside - т.е.
фактически, ширина aside будет заморожена */

/* .flexible-aside {
    flex: 1 1 300px;
}

.main {
    flex: 9999 1 700px;
} */

@media (min-width: 1040px) {
    .flexible-aside {
        flex-basis: 300px;
    }
    .main {
        flex-basis: 700px;
        flex-grow: 1;
    }
}

.d-flex {
    display: flex;
}

.flex-wrap {
    flex-wrap: wrap;
    -border: dotted 1px brown;
}

.container {
    padding: 10px 20px;
    -border: dotted 1px red;
}

.nav {
    -border: dotted 1px darkblue;
    border-bottom: 1px solid #e0e0e0;
}

.nav ul {
    display: flex;
    flex-wrap: wrap;
    margin: 0;
    padding: 0;
    list-style: none;
}

.nav li {
    display: flex;
    flex-grow: 1;
    align-items: center;
    padding: 15px 30px;
}

.nav a {
    color: inherit;
    text-decoration: none;
}

.nav li:hover {
    color: #3c3c3c;
    background: #f1f1f1;
    cursor: pointer;
}